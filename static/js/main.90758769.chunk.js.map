{"version":3,"sources":["routes/index.jsx","routes/NotFoundPage/NotFoundPage.jsx","store/modules/ui/state.js","store/modules/ui/reducer.js","store/modules/ui/types.js","store/modules/ui/actions.js","store/modules/ui/index.js","serviceWorker.js","store/index.js","store/modules/index.js","index.js"],"names":["DefaultLayoutRoute","lazy","Promise","all","__webpack_require__","e","then","bind","AboutPage","HomePage","AppRoutes","_ref","routes","react__WEBPACK_IMPORTED_MODULE_2___default","a","createElement","react__WEBPACK_IMPORTED_MODULE_2__","fallback","react_router_dom__WEBPACK_IMPORTED_MODULE_5__","length","reduce","b","concat","Object","_Users_helmuth_Projects_resume_node_modules_react_scripts_node_modules_babel_runtime_helpers_esm_toConsumableArray__WEBPACK_IMPORTED_MODULE_0__","exact","path","component","react_router_dom__WEBPACK_IMPORTED_MODULE_6__","NotFoundPage","react_router__WEBPACK_IMPORTED_MODULE_4__","to","hot","module","_ref2","history","connected_react_router__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","semantic_ui_react__WEBPACK_IMPORTED_MODULE_1__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_2__","semantic_ui_react__WEBPACK_IMPORTED_MODULE_3__","centered","verticalAlign","style","minHeight","Column","Row","textAlign","name","size","as","initialState","isSidebarVisible","reducer","state","arguments","undefined","type","assign","toggleSidebar","d","__webpack_exports__","ui_name","reducer_reducer","actions_toggleSidebar","Boolean","window","location","hostname","match","storeInstance","uiStore","require","isServer","document","modules","url","process","createMemoryHistory","initialEntries","createBrowserHistory","basename","listen","anchorate","__PRELOADED_STATE__","middleware","thunkMiddleware","routerMiddleware","composedEnhancers","compose","apply","applyMiddleware","store","createStore","combineReducers","objectSpread","defineProperty","router","connectRouter","acc","rootReducer","app","react_default","es","root","querySelector","hydrate","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.90758769.chunk.js","sourcesContent":["// @flow\nimport { ConnectedRouter } from 'connected-react-router';\nimport React, { lazy, Suspense } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { Redirect } from 'react-router';\nimport { Route, Switch } from 'react-router-dom';\n\nimport NotFoundPage from './NotFoundPage/NotFoundPage';\n\nconst DefaultLayoutRoute = lazy(() => import('../layouts/DefaultLayout'));\nconst AboutPage = lazy(() => import('./AboutPage/AboutPage'));\nconst HomePage = lazy(() => import('./HomePage/HomePage'));\n\nexport const AppRoutes = ({ routes }: any) => {\n  return (\n    <Suspense fallback={null}>\n      <Switch>\n        {routes && routes.length && routes.reduce((a, b) => [...a, b], [])}\n        <DefaultLayoutRoute exact path=\"/\" component={HomePage} />\n        <DefaultLayoutRoute path=\"/about\" component={AboutPage} />\n        <Route path=\"/not-found\" component={NotFoundPage} />\n        <Redirect to=\"/not-found\" />\n      </Switch>\n    </Suspense>\n  );\n};\n\nexport const AppRouter = ({ history, routes }: any) => {\n  return (\n    <ConnectedRouter history={history}>\n      <AppRoutes routes={routes} />\n    </ConnectedRouter>\n  );\n};\n\nexport default hot(module)(AppRouter);\n","import React from 'react';\nimport { Grid, Header, Icon } from 'semantic-ui-react';\n\nconst NotFoundPage = () => (\n  <Grid centered verticalAlign=\"middle\" style={{ minHeight: '700px' }}>\n    <Grid.Column>\n      <Grid.Row style={{ textAlign: 'center' }}>\n        <Icon name=\"marker\" size=\"huge\" />\n        <Header as=\"h1\">You are here!</Header>\n        <Header as=\"h2\">But nothing found for you #404</Header>\n      </Grid.Row>\n    </Grid.Column>\n  </Grid>\n);\n\nexport default NotFoundPage;\n","// @flow\nexport interface UIStoreState {\n  isSidebarVisible: boolean;\n}\n\nexport const initialState: UIStoreState = { isSidebarVisible: false };\n","// @flow\nimport { initialState, UIStoreState } from './state';\nimport { UI_TOGGLE_SIDEBAR } from './types';\n\nexport interface ToggleSidebarActions {\n  type: typeof UI_TOGGLE_SIDEBAR;\n}\n\n// Reducer\nexport const reducer = (state: UIStoreState = initialState, action: ToggleSidebarActions): UIStoreState => {\n  switch (action.type) {\n    case UI_TOGGLE_SIDEBAR:\n      return Object.assign({}, state, { isSidebarVisible: !state.isSidebarVisible });\n    default:\n      return state;\n  }\n};\n","// Getters (GET*)\n// [CONTEXT]_[ACTION]_[PROPERTY]\n\n// Mutations (SET*, ADD*, REMOVE*)\n// [CONTEXT]_[ACTION]_[PROPERTY]\n\n// Actions (FETCH*, CREATE*, UPDATE*, DELETE*)\n// [CONTEXT]_[ACTION]_[PROPERTY]_[STATUS]\nexport const UI_TOGGLE_SIDEBAR = 'UI_TOGGLE_SIDEBAR';\n","import { UI_TOGGLE_SIDEBAR } from './types';\n\nexport const toggleSidebar = () => ({ type: UI_TOGGLE_SIDEBAR });\n","export * from './reducer';\nexport * from './actions';\nexport * from './state';\n\nexport const name = 'ui';\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// @flow\nimport { anchorate } from 'anchorate';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { createBrowserHistory, createMemoryHistory } from 'history';\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport reduxImmutableStateInvariant from 'redux-immutable-state-invariant';\nimport thunkMiddleware from 'redux-thunk';\n\nimport { uiStore } from './modules';\n\nexport const isServer = !(typeof window !== 'undefined' && window.document && window.document.createElement);\n\nlet storeInstance;\n\nexport default (modules: any[] = [], url: string = process.env.PUBLIC_URL || '/') => {\n  if (storeInstance) {\n    return storeInstance;\n  }\n\n  // Create a history depending on the environment\n  const history = isServer\n    ? createMemoryHistory({\n        initialEntries: [url]\n      })\n    : createBrowserHistory({\n        basename: url\n      });\n\n  history.listen(() => {\n    anchorate();\n  });\n\n  // Do we have preloaded state available? Great, save it.\n  const initialState = !isServer ? window.__PRELOADED_STATE__ : {};\n  const enhancers = [];\n  const middleware = [thunkMiddleware, routerMiddleware(history)];\n\n  if (process.env.NODE_ENV === 'development' && !isServer) {\n    // Redux middleware that spits an error on you when you try to mutate your state either inside a dispatch or between dispatches.\n    middleware.push(reduxImmutableStateInvariant());\n\n    const devToolsExtension = window.devToolsExtension;\n\n    if (typeof devToolsExtension === 'function') {\n      enhancers.push(devToolsExtension());\n    }\n  }\n\n  const composedEnhancers = compose(\n    applyMiddleware(...middleware),\n    ...enhancers\n  );\n\n  // Delete it once we have it stored in a variable\n  if (!isServer) {\n    delete window.__PRELOADED_STATE__;\n  }\n\n  const rootReducer = history =>\n    combineReducers({\n      router: connectRouter(history),\n      [uiStore.name]: uiStore.reducer,\n      ...modules.reduce((acc, module: any) => ({ ...acc, [module.name]: module.reducer }), {})\n    });\n\n  // Create the store\n  const store = createStore(rootReducer(history), initialState, composedEnhancers);\n\n  storeInstance = {\n    store,\n    history\n  };\n\n  return storeInstance;\n};\n","export const uiStore = require('./ui');\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport AppRouter from './routes';\n\nimport * as serviceWorker from './serviceWorker';\nimport createStore from './store';\n\nconst { store, history } = createStore([]);\n\nconst app = (\n  <Provider store={store}>\n    <AppRouter history={history} routes={[]} />\n  </Provider>\n);\n\nconst root = document.querySelector('#root');\n\nif (process.env.NODE_ENV === 'production') {\n  // If we're running in production, we use hydrate to get fast page loads by just\n  // attaching event listeners after the initial render\n  hydrate(app, root);\n} else {\n  // If we're not running on the server, just render like normal\n  render(app, root);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}