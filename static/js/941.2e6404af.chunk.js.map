{"version":3,"file":"static/js/941.2e6404af.chunk.js","mappings":"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","sources":["routes/AboutPage/AboutPage.jsx","../node_modules/semantic-ui-react/dist/es/elements/Container/Container.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/SegmentGroup.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/SegmentInline.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/Segment.js"],"sourcesContent":["import { Container, Header, Icon, Segment } from 'semantic-ui-react';\n\nconst AboutPage = () => {\n  return (\n    <Container>\n      <Segment vertical>\n        <Header as=\"h2\">\n          <Icon name=\"info circle\" />\n          <Header.Content>About</Header.Content>\n        </Header>\n      </Segment>\n      <Segment vertical>\n        <p>This project is created by @helmuthdu.</p>\n        <p>\n          For any question, I&apos;m on\n          <a href=\"mailto:helmuthdu@gmail.com\" target=\"blank\">\n            helmuthdu@gmail.com\n          </a>\n        </p>\n        <p>\n          For any issues, any PR are welcoming\n          <a href=\"https://github.com/helmuthdu/resume\" target=\"blank\">\n            {' '}\n            on this repository\n          </a>\n        </p>\n      </Segment>\n    </Container>\n  );\n};\n\nexport default AboutPage;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp } from '../../lib';\n/**\n * A container limits content to a maximum width.\n */\n\nfunction Container(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      fluid = props.fluid,\n      text = props.text,\n      textAlign = props.textAlign;\n  var classes = cx('ui', useKeyOnly(text, 'text'), useKeyOnly(fluid, 'fluid'), useTextAlignProp(textAlign), 'container', className);\n  var rest = getUnhandledProps(Container, props);\n  var ElementType = getElementType(Container, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nContainer.handledProps = [\"as\", \"children\", \"className\", \"content\", \"fluid\", \"text\", \"textAlign\"];\nContainer.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Container has no maximum width. */\n  fluid: PropTypes.bool,\n\n  /** Reduce maximum width to more naturally accommodate text. */\n  text: PropTypes.bool,\n\n  /** Align container text. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS)\n} : {};\nexport default Container;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly } from '../../lib';\n/**\n * A group of segments can be formatted to appear together.\n */\n\nfunction SegmentGroup(props) {\n  var children = props.children,\n      className = props.className,\n      compact = props.compact,\n      content = props.content,\n      horizontal = props.horizontal,\n      piled = props.piled,\n      raised = props.raised,\n      size = props.size,\n      stacked = props.stacked;\n  var classes = cx('ui', size, useKeyOnly(compact, 'compact'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(piled, 'piled'), useKeyOnly(raised, 'raised'), useKeyOnly(stacked, 'stacked'), 'segments', className);\n  var rest = getUnhandledProps(SegmentGroup, props);\n  var ElementType = getElementType(SegmentGroup, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegmentGroup.handledProps = [\"as\", \"children\", \"className\", \"compact\", \"content\", \"horizontal\", \"piled\", \"raised\", \"size\", \"stacked\"];\nSegmentGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A segment may take up only as much space as is necessary. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Formats content to be aligned horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** Formatted to look like a pile of pages. */\n  piled: PropTypes.bool,\n\n  /** A segment group may be formatted to raise above the page. */\n  raised: PropTypes.bool,\n\n  /** A segment group can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** Formatted to show it contains multiple pages. */\n  stacked: PropTypes.bool\n} : {};\nexport default SegmentGroup;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A placeholder segment can be inline.\n */\n\nfunction SegmentInline(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('inline', className);\n  var rest = getUnhandledProps(SegmentInline, props);\n  var ElementType = getElementType(SegmentInline, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegmentInline.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nSegmentInline.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default SegmentInline;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _without from \"lodash-es/without\";\nimport cx from 'clsx';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useTextAlignProp, useValueAndKey } from '../../lib';\nimport SegmentGroup from './SegmentGroup';\nimport SegmentInline from './SegmentInline';\n/**\n * A segment is used to create a grouping of related content.\n */\n\nfunction Segment(props) {\n  var attached = props.attached,\n      basic = props.basic,\n      children = props.children,\n      circular = props.circular,\n      className = props.className,\n      clearing = props.clearing,\n      color = props.color,\n      compact = props.compact,\n      content = props.content,\n      disabled = props.disabled,\n      floated = props.floated,\n      inverted = props.inverted,\n      loading = props.loading,\n      placeholder = props.placeholder,\n      padded = props.padded,\n      piled = props.piled,\n      raised = props.raised,\n      secondary = props.secondary,\n      size = props.size,\n      stacked = props.stacked,\n      tertiary = props.tertiary,\n      textAlign = props.textAlign,\n      vertical = props.vertical;\n  var classes = cx('ui', color, size, useKeyOnly(basic, 'basic'), useKeyOnly(circular, 'circular'), useKeyOnly(clearing, 'clearing'), useKeyOnly(compact, 'compact'), useKeyOnly(disabled, 'disabled'), useKeyOnly(inverted, 'inverted'), useKeyOnly(loading, 'loading'), useKeyOnly(placeholder, 'placeholder'), useKeyOnly(piled, 'piled'), useKeyOnly(raised, 'raised'), useKeyOnly(secondary, 'secondary'), useKeyOnly(stacked, 'stacked'), useKeyOnly(tertiary, 'tertiary'), useKeyOnly(vertical, 'vertical'), useKeyOrValueAndKey(attached, 'attached'), useKeyOrValueAndKey(padded, 'padded'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), 'segment', className);\n  var rest = getUnhandledProps(Segment, props);\n  var ElementType = getElementType(Segment, props);\n  return /*#__PURE__*/React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegment.handledProps = [\"as\", \"attached\", \"basic\", \"children\", \"circular\", \"className\", \"clearing\", \"color\", \"compact\", \"content\", \"disabled\", \"floated\", \"inverted\", \"loading\", \"padded\", \"piled\", \"placeholder\", \"raised\", \"secondary\", \"size\", \"stacked\", \"tertiary\", \"textAlign\", \"vertical\"];\nSegment.Group = SegmentGroup;\nSegment.Inline = SegmentInline;\nSegment.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Attach segment to other content, like a header. */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n\n  /** A basic segment has no special formatting. */\n  basic: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** A segment can be circular. */\n  circular: PropTypes.bool,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A segment can clear floated content. */\n  clearing: PropTypes.bool,\n\n  /** Segment can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A segment may take up only as much space as is necessary. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A segment may show its content is disabled. */\n  disabled: PropTypes.bool,\n\n  /** Segment content can be floated to the left or right. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A segment can have its colors inverted for contrast. */\n  inverted: PropTypes.bool,\n\n  /** A segment may show its content is being loaded. */\n  loading: PropTypes.bool,\n\n  /** A segment can increase its padding. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A segment can be used to reserve space for conditionally displayed content. */\n  placeholder: PropTypes.bool,\n\n  /** Formatted to look like a pile of pages. */\n  piled: PropTypes.bool,\n\n  /** A segment may be formatted to raise above the page. */\n  raised: PropTypes.bool,\n\n  /** A segment can be formatted to appear less noticeable. */\n  secondary: PropTypes.bool,\n\n  /** A segment can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** Formatted to show it contains multiple pages. */\n  stacked: PropTypes.bool,\n\n  /** A segment can be formatted to appear even less noticeable. */\n  tertiary: PropTypes.bool,\n\n  /** Formats content to be aligned as part of a vertical group. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** Formats content to be aligned vertically. */\n  vertical: PropTypes.bool\n} : {};\nexport default Segment;"],"names":["vertical","as","name","href","target","Container","props","children","className","content","fluid","text","textAlign","classes","cx","useKeyOnly","useTextAlignProp","rest","getUnhandledProps","ElementType","getElementType","React","_extends","childrenUtils","handledProps","propTypes","SegmentGroup","compact","horizontal","piled","raised","size","stacked","SegmentInline","Segment","attached","basic","circular","clearing","color","disabled","floated","inverted","loading","placeholder","padded","secondary","tertiary","useKeyOrValueAndKey","useValueAndKey","Group","Inline"],"sourceRoot":""}