{"version":3,"sources":["routes/index.jsx","routes/NotFoundPage/NotFoundPage.jsx","store/modules/ui/state.js","store/modules/ui/reducer.js","store/modules/ui/types.js","store/modules/ui/actions.js","store/modules/ui/index.js","serviceWorker.js","store/index.js","store/modules/index.js","index.jsx"],"names":["DefaultLayoutRoute","lazy","AboutPage","HomePage","AppRoutes","routes","fallback","length","reduce","a","b","exact","path","component","NotFoundPage","to","defaultProps","hot","module","history","centered","verticalAlign","style","minHeight","Column","Row","textAlign","name","size","as","initialState","isSidebarVisible","reducer","state","action","type","Object","assign","toggleSidebar","Boolean","window","location","hostname","match","storeInstance","uiStore","require","isServer","document","createElement","modules","url","process","createMemoryHistory","initialEntries","createBrowserHistory","basename","listen","anchorate","__PRELOADED_STATE__","enhancers","middleware","thunkMiddleware","routerMiddleware","composedEnhancers","compose","applyMiddleware","rootReducer","combineReducers","router","connectRouter","acc","store","createStore","app","root","querySelector","hydrate","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ae555463.chunk.js","sourcesContent":["import { ConnectedRouter } from 'connected-react-router';\nimport PropTypes from 'prop-types';\nimport React, { lazy, Suspense } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { Redirect } from 'react-router';\nimport { Route, Switch } from 'react-router-dom';\n\nimport NotFoundPage from './NotFoundPage/NotFoundPage';\n\nconst DefaultLayoutRoute = lazy(() => import('../layouts/DefaultLayout'));\nconst AboutPage = lazy(() => import('./AboutPage/AboutPage'));\nconst HomePage = lazy(() => import('./HomePage/HomePage'));\n\nexport const AppRoutes = ({ routes }) => {\n  return (\n    <Suspense fallback={null}>\n      <Switch>\n        {routes && routes.length && routes.reduce((a, b) => [...a, b], [])}\n        <DefaultLayoutRoute exact path=\"/\" component={HomePage} />\n        <DefaultLayoutRoute path=\"/about\" component={AboutPage} />\n        <Route path=\"/not-found\" component={NotFoundPage} />\n        <Redirect to=\"/not-found\" />\n      </Switch>\n    </Suspense>\n  );\n};\n\nAppRoutes.propTypes = {\n  routes: PropTypes.array.isRequired\n};\n\nAppRoutes.defaultProps = {\n  routes: []\n};\n\nexport const AppRouter = ({ history, routes }) => {\n  return (\n    <ConnectedRouter history={history}>\n      <AppRoutes routes={routes} />\n    </ConnectedRouter>\n  );\n};\n\nAppRouter.propTypes = {\n  history: PropTypes.any.isRequired,\n  routes: PropTypes.array.isRequired\n};\n\nexport default hot(module)(AppRouter);\n","import React from 'react';\nimport { Grid, Header, Icon } from 'semantic-ui-react';\n\nconst NotFoundPage = () => (\n  <Grid centered verticalAlign=\"middle\" style={{ minHeight: '700px' }}>\n    <Grid.Column>\n      <Grid.Row style={{ textAlign: 'center' }}>\n        <Icon name=\"marker\" size=\"huge\" />\n        <Header as=\"h1\">You are here!</Header>\n        <Header as=\"h2\">But nothing found for you #404</Header>\n      </Grid.Row>\n    </Grid.Column>\n  </Grid>\n);\n\nexport default NotFoundPage;\n","export const initialState = { isSidebarVisible: false };\n","import { initialState } from './state';\nimport { UI_TOGGLE_SIDEBAR } from './types';\n\n// Reducer\nexport const reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case UI_TOGGLE_SIDEBAR:\n      return Object.assign({}, state, { isSidebarVisible: !state.isSidebarVisible });\n    default:\n      return state;\n  }\n};\n","// Getters (GET*)\n// [CONTEXT]_[ACTION]_[PROPERTY]\n\n// Mutations (SET*, ADD*, REMOVE*)\n// [CONTEXT]_[ACTION]_[PROPERTY]\n\n// Actions (FETCH*, CREATE*, UPDATE*, DELETE*)\n// [CONTEXT]_[ACTION]_[PROPERTY]_[STATUS]\nexport const UI_TOGGLE_SIDEBAR = 'UI_TOGGLE_SIDEBAR';\n","import { UI_TOGGLE_SIDEBAR } from './types';\n\nexport const toggleSidebar = () => ({ type: UI_TOGGLE_SIDEBAR });\n","export * from './reducer';\nexport * from './actions';\nexport * from './state';\n\nexport const name = 'ui';\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { anchorate } from 'anchorate';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { createBrowserHistory, createMemoryHistory } from 'history';\nimport { applyMiddleware, combineReducers, compose, createStore } from 'redux';\nimport reduxImmutableStateInvariant from 'redux-immutable-state-invariant';\nimport thunkMiddleware from 'redux-thunk';\n\nimport { uiStore } from './modules';\n\nexport const isServer = !(typeof window !== 'undefined' && window.document && window.document.createElement);\n\nlet storeInstance;\n\nexport default (modules = [], url = process.env.PUBLIC_URL || '/') => {\n  if (storeInstance) {\n    return storeInstance;\n  }\n\n  // Create a history depending on the environment\n  const history = isServer\n    ? createMemoryHistory({\n        initialEntries: [url]\n      })\n    : createBrowserHistory({\n        basename: url\n      });\n\n  history.listen(() => {\n    anchorate();\n  });\n\n  // Do we have preloaded state available? Great, save it.\n  const initialState = !isServer ? window.__PRELOADED_STATE__ : {};\n  const enhancers = [];\n  const middleware = [thunkMiddleware, routerMiddleware(history)];\n\n  if (process.env.NODE_ENV === 'development' && !isServer) {\n    // Redux middleware that spits an error on you when you try to mutate your state either inside a dispatch or between dispatches.\n    middleware.push(reduxImmutableStateInvariant());\n\n    const devToolsExtension = window.devToolsExtension;\n\n    if (typeof devToolsExtension === 'function') {\n      enhancers.push(devToolsExtension());\n    }\n  }\n\n  const composedEnhancers = compose(\n    applyMiddleware(...middleware),\n    ...enhancers\n  );\n\n  // Delete it once we have it stored in a variable\n  if (!isServer) {\n    delete window.__PRELOADED_STATE__;\n  }\n\n  const rootReducer = history =>\n    combineReducers({\n      router: connectRouter(history),\n      [uiStore.name]: uiStore.reducer,\n      ...modules.reduce((acc, module) => ({ ...acc, [module.name]: module.reducer }), {})\n    });\n\n  // Create the store\n  const store = createStore(rootReducer(history), initialState, composedEnhancers);\n\n  storeInstance = {\n    store,\n    history\n  };\n\n  return storeInstance;\n};\n","export const uiStore = require('./ui');\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport AppRouter from './routes';\n\nimport * as serviceWorker from './serviceWorker';\nimport createStore from './store';\n\nconst { store, history } = createStore([]);\n\nconst app = (\n  <Provider store={store}>\n    <AppRouter history={history} routes={[]} />\n  </Provider>\n);\n\nconst root = document.querySelector('#root');\n\nif (process.env.NODE_ENV === 'production') {\n  // If we're running in production, we use hydrate to get fast page loads by just\n  // attaching event listeners after the initial render\n  hydrate(app, root);\n} else {\n  // If we're not running on the server, just render like normal\n  render(app, root);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}