{"version":3,"sources":["store/modules/ui/state.js","store/modules/ui/reducer.js","store/modules/ui/types.js","store/modules/ui/actions.js","store/modules/ui/index.js","pages/index.jsx","store/modules/index.js","store/index.js","serviceWorker.js","index.js"],"names":["initialState","isSidebarVisible","uiReducer","state","arguments","length","undefined","type","Object","assign","toggleSidebar","__webpack_require__","d","__webpack_exports__","reducer_uiReducer","actions_toggleSidebar","module","connected_react_router__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1__","react__WEBPACK_IMPORTED_MODULE_1___default","n","react_hot_loader__WEBPACK_IMPORTED_MODULE_2__","react_router__WEBPACK_IMPORTED_MODULE_3__","react_router_dom__WEBPACK_IMPORTED_MODULE_4__","react_router_dom__WEBPACK_IMPORTED_MODULE_5__","DefaultLayoutRoute","lazy","Promise","all","e","then","bind","AboutPage","HomePage","NotFoundPage","hot","_ref","history","a","createElement","fallback","exact","path","component","to","combineReducers","ui","createBrowserHistory","basename","process","listen","anchorate","middleware","thunkMiddleware","routerMiddleware","composedEnhancers","compose","apply","applyMiddleware","concat","createStore","connectRouter","rootReducer","Boolean","window","location","hostname","match","target","document","querySelector","app","react_default","es","store","pages","hydrate","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yFAKO,IAAMA,EAA6B,CAAEC,kBAAkB,GCIjDC,EAAY,WAA6E,IAA5EC,EAA4EC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAtDJ,EAC9C,QADoGI,UAAAC,OAAA,EAAAD,UAAA,QAAAE,GACrFC,MACb,ICH6B,oBDI3B,OAAOC,OAAOC,OAAO,GAAIN,EAAO,CAAEF,kBAAmBE,EAAMF,mBAC7D,QACE,OAAOE,IEZAO,EAAgB,iBAAO,CAAEH,KDML,sBERjCI,EAAAC,EAAAC,EAAA,sBAAAC,IAAAH,EAAAC,EAAAC,EAAA,sBAAAE,sCCAA,SAAAC,GAAA,IAAAC,EAAAN,EAAA,IAAAO,EAAAP,EAAA,GAAAQ,EAAAR,EAAAS,EAAAF,GAAAG,EAAAV,EAAA,IAAAW,EAAAX,EAAA,IAAAY,EAAAZ,EAAA,IAAAa,EAAAb,EAAA,KAMMc,EAAqBC,eAAK,kBAAMC,QAAAC,IAAA,CAAAjB,EAAAkB,EAAA,GAAAlB,EAAAkB,EAAA,GAAAlB,EAAAkB,EAAA,KAAAC,KAAAnB,EAAAoB,KAAA,YAChCC,EAAYN,eAAK,kBAAMC,QAAAC,IAAA,CAAAjB,EAAAkB,EAAA,GAAAlB,EAAAkB,EAAA,GAAAlB,EAAAkB,EAAA,KAAAC,KAAAnB,EAAAoB,KAAA,YACvBE,EAAWP,eAAK,kBAAMC,QAAAC,IAAA,CAAAjB,EAAAkB,EAAA,GAAAlB,EAAAkB,EAAA,GAAAlB,EAAAkB,EAAA,GAAAlB,EAAAkB,EAAA,GAAAlB,EAAAkB,EAAA,KAAAC,KAAAnB,EAAAoB,KAAA,YACtBG,EAAeR,eAAK,kBAAMC,QAAAC,IAAA,CAAAjB,EAAAkB,EAAA,GAAAlB,EAAAkB,EAAA,GAAAlB,EAAAkB,EAAA,KAAAC,KAAAnB,EAAAoB,KAAA,YAejBI,kBAAInB,EAAJmB,CAbI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,QAAH,OACjBlB,EAAAmB,EAAAC,cAACtB,EAAA,gBAAD,CAAiBoB,QAASA,GACxBlB,EAAAmB,EAAAC,cAACrB,EAAA,SAAD,CAAUsB,SAAU,MAClBrB,EAAAmB,EAAAC,cAAChB,EAAA,EAAD,KACEJ,EAAAmB,EAAAC,cAACd,EAAD,CAAoBgB,OAAK,EAACC,KAAK,IAAIC,UAAWV,IAC9Cd,EAAAmB,EAAAC,cAACd,EAAD,CAAoBiB,KAAK,SAASC,UAAWX,IAC7Cb,EAAAmB,EAAAC,cAACf,EAAA,EAAD,CAAOkB,KAAK,aAAaC,UAAWT,IACpCf,EAAAmB,EAAAC,cAACjB,EAAA,EAAD,CAAUsB,GAAG,wNCfNC,cAAgB,CAC7BC,GAAI5C,MCIOmC,EAAUU,YAAqB,CAAEC,SAAUC,YAExDZ,EAAQa,OAAO,WACbC,wBAGF,IAEMC,EAAa,CAACC,IAAiBC,2BAAiBjB,IAahDkB,EAAoBC,IAAOC,WAAP,GACxBC,IAAeD,WAAf,EAAmBL,IADKO,OAdR,KAmBHC,cAAYC,wBAAcxB,EAAdwB,CAAuBC,GApB7B,GAoByDP,GCxB1DQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MAAM,2DCNnC,IAAMC,EAASC,SAASC,cAAc,SAEhCC,EACJC,EAAAlC,EAAAC,cAACkC,EAAA,SAAD,CAAUC,MAAOA,GACfF,EAAAlC,EAAAC,cAACoC,EAAA,EAAD,CAAKtC,QAASA,KAOhBuC,kBAAQL,EAAKH,GD8FT,kBAAmBS,WACrBA,UAAUC,cAAcC,MAAMjD,KAAK,SAAAkD,GACjCA,EAAaC","file":"static/js/main.58c84126.chunk.js","sourcesContent":["// @flow\nexport interface UIStoreState {\n  isSidebarVisible: boolean;\n}\n\nexport const initialState: UIStoreState = { isSidebarVisible: false };\n","// @flow\nimport { initialState, UIStoreState } from './state';\nimport { UI_TOGGLE_SIDEBAR } from './types';\n\nexport interface ToggleSidebar {\n  type: typeof UI_TOGGLE_SIDEBAR;\n}\n\n// Reducer\nexport const uiReducer = (state: UIStoreState = initialState, action: ToggleSidebar): UIStoreState => {\n  switch (action.type) {\n    case UI_TOGGLE_SIDEBAR:\n      return Object.assign({}, state, { isSidebarVisible: !state.isSidebarVisible });\n    default:\n      return state;\n  }\n};\n","// Getters (GET*)\n// [CONTEXT]_[ACTION]_[PROPERTY]\n\n// Mutations (SET*, ADD*, REMOVE*)\n// [CONTEXT]_[ACTION]_[PROPERTY]\n\n// Actions (FETCH*, CREATE*, UPDATE*, DELETE*)\n// [CONTEXT]_[ACTION]_[PROPERTY]_[STATUS]\nexport const UI_TOGGLE_SIDEBAR = 'UI_TOGGLE_SIDEBAR';\n","import { UI_TOGGLE_SIDEBAR } from './types';\n\nexport const toggleSidebar = () => ({ type: UI_TOGGLE_SIDEBAR });\n","export * from './reducer';\nexport * from './actions';\n","import { ConnectedRouter } from 'connected-react-router';\nimport React, { lazy, Suspense } from 'react';\nimport { hot } from 'react-hot-loader';\nimport { Redirect } from 'react-router';\nimport { Route, Switch } from 'react-router-dom';\n\nconst DefaultLayoutRoute = lazy(() => import('../layouts/DefaultLayout'));\nconst AboutPage = lazy(() => import('./AboutPage/AboutPage'));\nconst HomePage = lazy(() => import('./HomePage/HomePage'));\nconst NotFoundPage = lazy(() => import('./NotFoundPage/NotFoundPage'));\n\nexport const App = ({ history }) => (\n  <ConnectedRouter history={history}>\n    <Suspense fallback={null}>\n      <Switch>\n        <DefaultLayoutRoute exact path=\"/\" component={HomePage} />\n        <DefaultLayoutRoute path=\"/about\" component={AboutPage} />\n        <Route path=\"/not-found\" component={NotFoundPage} />\n        <Redirect to=\"/not-found\" />\n      </Switch>\n    </Suspense>\n  </ConnectedRouter>\n);\n\nexport default hot(module)(App);\n","import { combineReducers } from 'redux';\nimport { uiReducer } from './ui';\n\nexport default combineReducers({\n  ui: uiReducer\n});\n","import { anchorate } from 'anchorate';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport reduxImmutableStateInvariant from 'redux-immutable-state-invariant';\nimport thunkMiddleware from 'redux-thunk';\nimport rootReducer from './modules';\n\nexport const history = createBrowserHistory({ basename: process.env.PUBLIC_URL });\n\nhistory.listen(() => {\n  anchorate();\n});\n\nconst initialState = {};\nconst enhancers = [];\nconst middleware = [thunkMiddleware, routerMiddleware(history)];\n\nif (process.env.NODE_ENV === 'development') {\n  // Redux middleware that spits an error on you when you try to mutate your state either inside a dispatch or between dispatches.\n  middleware.push(reduxImmutableStateInvariant());\n\n  const devToolsExtension = window.devToolsExtension;\n\n  if (typeof devToolsExtension === 'function') {\n    enhancers.push(devToolsExtension());\n  }\n}\n\nconst composedEnhancers = compose(\n  applyMiddleware(...middleware),\n  ...enhancers\n);\n\nexport default createStore(connectRouter(history)(rootReducer), initialState, composedEnhancers);\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404 || response.headers.get('content-type').indexOf('javascript') === -1) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport { hydrate, render } from 'react-dom';\nimport { Provider } from 'react-redux';\nimport App from './pages';\n\nimport store, { history } from './store';\n\nimport * as serviceWorker from './serviceWorker';\n\nconst target = document.querySelector('#root');\n\nconst app = (\n  <Provider store={store}>\n    <App history={history} />\n  </Provider>\n);\n\nif (process.env.NODE_ENV === 'production') {\n  // If we're running in production, we use hydrate to get fast page loads by just\n  // attaching event listeners after the initial render\n  hydrate(app, target);\n} else {\n  // If we're not running on the server, just render like normal\n  render(app, target);\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}