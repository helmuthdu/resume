{"version":3,"sources":["routes/AboutPage/AboutPage.jsx","../node_modules/semantic-ui-react/dist/es/elements/Container/Container.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/SegmentGroup.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/SegmentInline.js","../node_modules/semantic-ui-react/dist/es/elements/Segment/Segment.js"],"names":["AboutPage","vertical","as","name","Content","href","target","Container","props","children","className","content","fluid","text","textAlign","classes","cx","useKeyOnly","useTextAlignProp","rest","getUnhandledProps","ElementType","getElementType","React","createElement","_extends","childrenUtils","isNil","handledProps","propTypes","SegmentGroup","compact","horizontal","piled","raised","size","stacked","SegmentInline","Segment","attached","basic","circular","clearing","color","disabled","floated","inverted","loading","placeholder","padded","secondary","tertiary","useKeyOrValueAndKey","useValueAndKey","Group","Inline"],"mappings":"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","file":"static/js/7.554294a9.chunk.js","sourcesContent":["import React from 'react';\nimport { Container, Header, Icon, Segment } from 'semantic-ui-react';\n\nconst AboutPage = () => {\n  return (\n    <Container>\n      <Segment vertical>\n        <Header as=\"h2\">\n          <Icon name=\"info circle\" />\n          <Header.Content>About</Header.Content>\n        </Header>\n      </Segment>\n      <Segment vertical>\n        <p>This project is created by @helmuthdu.</p>\n        <p>\n          For any question, I'm on{' '}\n          <a href=\"mailto:helmuthdu@gmail.com\" target=\"blank\">\n            helmuthdu@gmail.com\n          </a>\n        </p>\n        <p>\n          For any issues, any PR are welcoming\n          <a href=\"https://github.com/helmuthdu/resume\" target=\"blank\">\n            {' '}\n            on this repository\n          </a>\n        </p>\n      </Segment>\n    </Container>\n  );\n};\n\nexport default AboutPage;\n","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useTextAlignProp } from '../../lib';\n/**\n * A container limits content to a maximum width.\n */\n\nfunction Container(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content,\n      fluid = props.fluid,\n      text = props.text,\n      textAlign = props.textAlign;\n  var classes = cx('ui', useKeyOnly(text, 'text'), useKeyOnly(fluid, 'fluid'), useTextAlignProp(textAlign), 'container', className);\n  var rest = getUnhandledProps(Container, props);\n  var ElementType = getElementType(Container, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nContainer.handledProps = [\"as\", \"children\", \"className\", \"content\", \"fluid\", \"text\", \"textAlign\"];\nContainer.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Container has no maximum width. */\n  fluid: PropTypes.bool,\n\n  /** Reduce maximum width to more naturally accommodate text. */\n  text: PropTypes.bool,\n\n  /** Align container text. */\n  textAlign: PropTypes.oneOf(SUI.TEXT_ALIGNMENTS)\n} : {};\nexport default Container;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly } from '../../lib';\n/**\n * A group of segments can be formatted to appear together.\n */\n\nfunction SegmentGroup(props) {\n  var children = props.children,\n      className = props.className,\n      compact = props.compact,\n      content = props.content,\n      horizontal = props.horizontal,\n      piled = props.piled,\n      raised = props.raised,\n      size = props.size,\n      stacked = props.stacked;\n  var classes = cx('ui', size, useKeyOnly(compact, 'compact'), useKeyOnly(horizontal, 'horizontal'), useKeyOnly(piled, 'piled'), useKeyOnly(raised, 'raised'), useKeyOnly(stacked, 'stacked'), 'segments', className);\n  var rest = getUnhandledProps(SegmentGroup, props);\n  var ElementType = getElementType(SegmentGroup, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegmentGroup.handledProps = [\"as\", \"children\", \"className\", \"compact\", \"content\", \"horizontal\", \"piled\", \"raised\", \"size\", \"stacked\"];\nSegmentGroup.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A segment may take up only as much space as is necessary. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** Formats content to be aligned horizontally. */\n  horizontal: PropTypes.bool,\n\n  /** Formatted to look like a pile of pages. */\n  piled: PropTypes.bool,\n\n  /** A segment group may be formatted to raise above the page. */\n  raised: PropTypes.bool,\n\n  /** A segment group can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** Formatted to show it contains multiple pages. */\n  stacked: PropTypes.bool\n} : {};\nexport default SegmentGroup;","import _extends from \"@babel/runtime/helpers/extends\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps } from '../../lib';\n/**\n * A placeholder segment can be inline.\n */\n\nfunction SegmentInline(props) {\n  var children = props.children,\n      className = props.className,\n      content = props.content;\n  var classes = cx('inline', className);\n  var rest = getUnhandledProps(SegmentInline, props);\n  var ElementType = getElementType(SegmentInline, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegmentInline.handledProps = [\"as\", \"children\", \"className\", \"content\"];\nSegmentInline.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand\n} : {};\nexport default SegmentInline;","import _extends from \"@babel/runtime/helpers/extends\";\nimport _without from \"lodash/without\";\nimport cx from 'classnames';\nimport PropTypes from 'prop-types';\nimport React from 'react';\nimport { childrenUtils, customPropTypes, getElementType, getUnhandledProps, SUI, useKeyOnly, useKeyOrValueAndKey, useTextAlignProp, useValueAndKey } from '../../lib';\nimport SegmentGroup from './SegmentGroup';\nimport SegmentInline from './SegmentInline';\n/**\n * A segment is used to create a grouping of related content.\n */\n\nfunction Segment(props) {\n  var attached = props.attached,\n      basic = props.basic,\n      children = props.children,\n      circular = props.circular,\n      className = props.className,\n      clearing = props.clearing,\n      color = props.color,\n      compact = props.compact,\n      content = props.content,\n      disabled = props.disabled,\n      floated = props.floated,\n      inverted = props.inverted,\n      loading = props.loading,\n      placeholder = props.placeholder,\n      padded = props.padded,\n      piled = props.piled,\n      raised = props.raised,\n      secondary = props.secondary,\n      size = props.size,\n      stacked = props.stacked,\n      tertiary = props.tertiary,\n      textAlign = props.textAlign,\n      vertical = props.vertical;\n  var classes = cx('ui', color, size, useKeyOnly(basic, 'basic'), useKeyOnly(circular, 'circular'), useKeyOnly(clearing, 'clearing'), useKeyOnly(compact, 'compact'), useKeyOnly(disabled, 'disabled'), useKeyOnly(inverted, 'inverted'), useKeyOnly(loading, 'loading'), useKeyOnly(placeholder, 'placeholder'), useKeyOnly(piled, 'piled'), useKeyOnly(raised, 'raised'), useKeyOnly(secondary, 'secondary'), useKeyOnly(stacked, 'stacked'), useKeyOnly(tertiary, 'tertiary'), useKeyOnly(vertical, 'vertical'), useKeyOrValueAndKey(attached, 'attached'), useKeyOrValueAndKey(padded, 'padded'), useTextAlignProp(textAlign), useValueAndKey(floated, 'floated'), 'segment', className);\n  var rest = getUnhandledProps(Segment, props);\n  var ElementType = getElementType(Segment, props);\n  return React.createElement(ElementType, _extends({}, rest, {\n    className: classes\n  }), childrenUtils.isNil(children) ? content : children);\n}\n\nSegment.handledProps = [\"as\", \"attached\", \"basic\", \"children\", \"circular\", \"className\", \"clearing\", \"color\", \"compact\", \"content\", \"disabled\", \"floated\", \"inverted\", \"loading\", \"padded\", \"piled\", \"placeholder\", \"raised\", \"secondary\", \"size\", \"stacked\", \"tertiary\", \"textAlign\", \"vertical\"];\nSegment.Group = SegmentGroup;\nSegment.Inline = SegmentInline;\nSegment.propTypes = process.env.NODE_ENV !== \"production\" ? {\n  /** An element type to render as (string or function). */\n  as: PropTypes.elementType,\n\n  /** Attach segment to other content, like a header. */\n  attached: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['top', 'bottom'])]),\n\n  /** A basic segment has no special formatting. */\n  basic: PropTypes.bool,\n\n  /** Primary content. */\n  children: PropTypes.node,\n\n  /** A segment can be circular. */\n  circular: PropTypes.bool,\n\n  /** Additional classes. */\n  className: PropTypes.string,\n\n  /** A segment can clear floated content. */\n  clearing: PropTypes.bool,\n\n  /** Segment can be colored. */\n  color: PropTypes.oneOf(SUI.COLORS),\n\n  /** A segment may take up only as much space as is necessary. */\n  compact: PropTypes.bool,\n\n  /** Shorthand for primary content. */\n  content: customPropTypes.contentShorthand,\n\n  /** A segment may show its content is disabled. */\n  disabled: PropTypes.bool,\n\n  /** Segment content can be floated to the left or right. */\n  floated: PropTypes.oneOf(SUI.FLOATS),\n\n  /** A segment can have its colors inverted for contrast. */\n  inverted: PropTypes.bool,\n\n  /** A segment may show its content is being loaded. */\n  loading: PropTypes.bool,\n\n  /** A segment can increase its padding. */\n  padded: PropTypes.oneOfType([PropTypes.bool, PropTypes.oneOf(['very'])]),\n\n  /** A segment can be used to reserve space for conditionally displayed content. */\n  placeholder: PropTypes.bool,\n\n  /** Formatted to look like a pile of pages. */\n  piled: PropTypes.bool,\n\n  /** A segment may be formatted to raise above the page. */\n  raised: PropTypes.bool,\n\n  /** A segment can be formatted to appear less noticeable. */\n  secondary: PropTypes.bool,\n\n  /** A segment can have different sizes. */\n  size: PropTypes.oneOf(_without(SUI.SIZES, 'medium')),\n\n  /** Formatted to show it contains multiple pages. */\n  stacked: PropTypes.bool,\n\n  /** A segment can be formatted to appear even less noticeable. */\n  tertiary: PropTypes.bool,\n\n  /** Formats content to be aligned as part of a vertical group. */\n  textAlign: PropTypes.oneOf(_without(SUI.TEXT_ALIGNMENTS, 'justified')),\n\n  /** Formats content to be aligned vertically. */\n  vertical: PropTypes.bool\n} : {};\nexport default Segment;"],"sourceRoot":""}